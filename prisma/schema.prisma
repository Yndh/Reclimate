datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String      @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  surveys         Survey[]    @relation(name: "UserSurveys")
  challenges      Challenge[]
  points          Int         @default(0)
  carbonFootprint Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Survey {
  id              String     @id @default(cuid())
  userId          String
  user            User       @relation(name: "UserSurveys", fields: [userId], references: [id])
  responses       Response[]
  carbonFootprint Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Response {
  id       String   @id @default(cuid())
  surveyId String
  survey   Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  question String
  answers  Answer[] @relation(name: "ResponseAnswers")
  answer   Answer?  @relation(name: "SelectedAnswer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String   @id @default(cuid())
  responseId String
  response   Response @relation(name: "ResponseAnswers", fields: [responseId], references: [id], onDelete: Cascade)
  answer     String

  selectedInId String?   @unique
  selectedIn   Response? @relation("SelectedAnswer", fields: [selectedInId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Challenge {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  points      Int
  isCompleted Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

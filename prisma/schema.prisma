generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String      @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  points          Int         @default(0)
  carbonFootprint Float?
  accounts        Account[]
  challenges      Challenge[]
  chats           Chat[]
  sessions        Session[]
  surveys         Survey[]    @relation("UserSurveys")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Survey {
  id              String     @id @default(cuid())
  userId          String
  carbonFootprint Float?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  responses       Response[]
  user            User       @relation("UserSurveys", fields: [userId], references: [id], onDelete: Cascade)
  tips            Tip[]
}

model Response {
  id        String   @id @default(cuid())
  surveyId  String
  question  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[] @relation("ResponseAnswers")
  answer    Answer?  @relation("SelectedAnswer")
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Answer {
  id           String    @id @default(cuid())
  responseId   String
  answer       String
  selectedInId String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  response     Response  @relation("ResponseAnswers", fields: [responseId], references: [id], onDelete: Cascade)
  selectedIn   Response? @relation("SelectedAnswer", fields: [selectedInId], references: [id])
}

model Tip {
  id          String   @id @default(cuid())
  surveyId    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  survey      Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Challenge {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  points      Int
  isCompleted Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chatId    String
  tokens    Int
  sender    Sender
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

enum Sender {
  USER
  ASSISTANT
}

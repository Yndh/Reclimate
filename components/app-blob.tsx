"use client";

import { useEffect, useRef, useState, useMemo } from "react";
import anime from "animejs/lib/anime.es.js";

interface BlopProps {
  x: number;
  y: number;
  side?: "right" | "left";
  bottom?: boolean;
}

export const AppBlob = ({ x, y, side = "left", bottom = false }: BlopProps) => {
  const pathRef = useRef<SVGPathElement>(null);

  const paths = useMemo(
    () => [
      "M43.2,-57.1C52.4,-43.9,53.6,-26.8,58.4,-8.9C63.3,9,71.8,27.7,68.2,44.6C64.6,61.4,49,76.5,32.6,77C16.3,77.4,-0.8,63.3,-20.6,56.2C-40.5,49.2,-63.1,49.4,-75.5,38.5C-87.8,27.6,-89.7,5.7,-84.2,-12.9C-78.6,-31.5,-65.4,-46.9,-50.1,-59C-34.8,-71.1,-17.4,-79.9,-0.2,-79.7C17.1,-79.5,34.1,-70.2,43.2,-57.1Z",
      "M52.7,-61.4C68.7,-49.4,82.4,-33.2,83.7,-16.2C85,0.8,73.9,18.5,63.4,36.5C52.9,54.5,43,72.8,27.6,80.3C12.2,87.9,-8.8,84.8,-22.1,74.1C-35.4,63.4,-41,45.2,-48.4,29.4C-55.7,13.6,-64.7,0.3,-67.5,-16.8C-70.3,-33.9,-66.9,-54.8,-54.6,-67.4C-42.3,-80,-21.2,-84.4,-1.4,-82.7C18.4,-81,36.7,-73.3,52.7,-61.4Z",
      "M36.6,-44.7C47,-34.9,54.7,-22.9,56.2,-10.5C57.7,2,53.1,15,47.7,30.5C42.3,46.1,36.1,64.1,23.8,71C11.6,77.8,-6.8,73.4,-23.6,66.5C-40.3,59.6,-55.6,50.3,-60.4,37.2C-65.2,24.1,-59.5,7.3,-54.6,-7.7C-49.7,-22.7,-45.5,-36,-36.5,-46C-27.5,-56.1,-13.8,-63,-0.3,-62.6C13.1,-62.2,26.2,-54.5,36.6,-44.7Z",
      "M37.6,-43C51.2,-33.4,66.4,-23.9,72.5,-9.8C78.6,4.4,75.6,23.1,67.5,40.7C59.4,58.2,46.2,74.5,31.1,75.7C16,77,-1,63.3,-19.8,55.9C-38.6,48.4,-59.2,47.2,-67.5,37C-75.7,26.7,-71.7,7.4,-67.4,-11C-63.1,-29.4,-58.5,-46.9,-47.3,-56.8C-36,-66.8,-18,-69.3,-3,-65.7C12,-62.1,24,-52.6,37.6,-43Z",
      "M48.7,-60.2C62.1,-46.7,71.5,-30.5,73,-14C74.6,2.5,68.4,19.2,60.5,36.9C52.6,54.6,43.1,73.3,29.2,76.8C15.4,80.3,-2.6,68.6,-15.8,57.7C-29,46.7,-37.3,36.5,-49.1,24.3C-61,12.1,-76.4,-2,-77.1,-16.3C-77.9,-30.6,-63.9,-45,-48.6,-58.2C-33.2,-71.3,-16.6,-83.3,0.5,-83.8C17.6,-84.4,35.2,-73.7,48.7,-60.2Z",
    ],
    []
  );

  useEffect(() => {
    const path = pathRef.current;

    if (!path) {
      return;
    }

    const morph = () => {
      const next = paths[Math.floor(Math.random() * paths.length)];

      anime({
        targets: path,
        d: next,
        duration: 3000,
        easing: "easeInOutQuad",
        complete: morph,
      });
    };

    morph();

    return () => {
      anime.remove(path);
    };
  }, [paths]);

  return (
    <svg
      viewBox="0 0 200 200"
      xmlns="http://www.w3.org/2000/svg"
      className={`fixed w-[600px] blur-3xl opacity-70 -z-50`}
      style={{
        [bottom ? "bottom" : "top"]: `${y}px`,
        [side]: `${x}px`,
      }}
    >
      <path
        ref={pathRef}
        className="fill-bgStart transition-all"
        d={paths[0]}
        transform="translate(100 100)"
      />
    </svg>
  );
};
